# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:22:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    SecretStr,
    confloat,
    conint,
    constr,
)


class AccessDeniedException(RootModel[Any]):
    root: Any


class Attribute(Enum):
    DEFAULT = 'DEFAULT'
    ALL = 'ALL'


class Attributes(RootModel[List[Attribute]]):
    root: List[Attribute]


class AuditImagesLimit(RootModel[conint(ge=0, le=4)]):
    root: conint(ge=0, le=4)


class BodyPart(Enum):
    FACE = 'FACE'
    HEAD = 'HEAD'
    LEFT_HAND = 'LEFT_HAND'
    RIGHT_HAND = 'RIGHT_HAND'


class Boolean(RootModel[bool]):
    root: bool


class BoundingBoxHeight(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class BoundingBoxWidth(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class CelebrityRecognitionSortBy(Enum):
    ID = 'ID'
    TIMESTAMP = 'TIMESTAMP'


class ClientRequestToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)


class CollectionId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.\-]+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.\-]+', min_length=1, max_length=255)


class CollectionIdList(RootModel[List[CollectionId]]):
    root: List[CollectionId]


class ConnectedHomeLabel(RootModel[str]):
    root: str


class ConnectedHomeLabels(RootModel[List[ConnectedHomeLabel]]):
    root: List[ConnectedHomeLabel] = Field(..., max_length=128, min_length=1)


class ContentClassifier(Enum):
    FreeOfPersonallyIdentifiableInformation = 'FreeOfPersonallyIdentifiableInformation'
    FreeOfAdultContent = 'FreeOfAdultContent'


class ContentClassifiers(RootModel[List[ContentClassifier]]):
    root: List[ContentClassifier] = Field(..., max_length=256)


class ContentModerationSortBy(Enum):
    NAME = 'NAME'
    TIMESTAMP = 'TIMESTAMP'


class DatasetArn(
    RootModel[
        constr(
            pattern=r'(^arn:[a-z\d-]+:rekognition:[a-z\d-]+:\d{12}:project\/[a-zA-Z0-9_.\-]{1,255}\/dataset\/(train|test)\/[0-9]+$)',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'(^arn:[a-z\d-]+:rekognition:[a-z\d-]+:\d{12}:project\/[a-zA-Z0-9_.\-]{1,255}\/dataset\/(train|test)\/[0-9]+$)',
        min_length=20,
        max_length=2048,
    )


class DatasetEntry(
    RootModel[constr(pattern=r'^\{.*\}$', min_length=1, max_length=100000)]
):
    root: constr(pattern=r'^\{.*\}$', min_length=1, max_length=100000)


class DatasetLabel(RootModel[constr(pattern=r'.{1,}', min_length=1, max_length=255)]):
    root: constr(pattern=r'.{1,}', min_length=1, max_length=255)


class DatasetLabels(RootModel[List[DatasetLabel]]):
    root: List[DatasetLabel] = Field(..., max_length=10, min_length=1)


class DatasetStatus(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_COMPLETE = 'UPDATE_COMPLETE'
    UPDATE_FAILED = 'UPDATE_FAILED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'


class DatasetStatusMessageCode(Enum):
    SUCCESS = 'SUCCESS'
    SERVICE_ERROR = 'SERVICE_ERROR'
    CLIENT_ERROR = 'CLIENT_ERROR'


class DatasetType(Enum):
    TRAIN = 'TRAIN'
    TEST = 'TEST'


class DateTime(RootModel[datetime]):
    root: datetime


class Degree(RootModel[confloat(ge=-180.0, le=180.0)]):
    root: confloat(ge=-180.0, le=180.0)


class DeleteCollectionRequest(BaseModel):
    CollectionId_1: CollectionId = Field(..., alias='CollectionId')


class DeleteDatasetRequest(BaseModel):
    DatasetArn_1: DatasetArn = Field(..., alias='DatasetArn')


class DeleteDatasetResponse(BaseModel):
    pass


class DeleteProjectPolicyResponse(BaseModel):
    pass


class DeleteStreamProcessorResponse(BaseModel):
    pass


class DescribeCollectionRequest(BaseModel):
    CollectionId_1: CollectionId = Field(..., alias='CollectionId')


class DescribeDatasetRequest(BaseModel):
    DatasetArn_1: DatasetArn = Field(..., alias='DatasetArn')


class DetectLabelsFeatureName(Enum):
    GENERAL_LABELS = 'GENERAL_LABELS'
    IMAGE_PROPERTIES = 'IMAGE_PROPERTIES'


class DetectLabelsMaxDominantColors(RootModel[conint(ge=0, le=20)]):
    root: conint(ge=0, le=20)


class DistributeDataset(BaseModel):
    Arn: DatasetArn


class DistributeDatasetEntriesResponse(BaseModel):
    pass


class DistributeDatasetMetadataList(RootModel[List[DistributeDataset]]):
    root: List[DistributeDataset] = Field(..., max_length=2, min_length=2)


class EmotionName(Enum):
    HAPPY = 'HAPPY'
    SAD = 'SAD'
    ANGRY = 'ANGRY'
    CONFUSED = 'CONFUSED'
    DISGUSTED = 'DISGUSTED'
    SURPRISED = 'SURPRISED'
    CALM = 'CALM'
    UNKNOWN = 'UNKNOWN'
    FEAR = 'FEAR'


class ExtendedPaginationToken(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class ExternalImageId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.\-:]+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.\-:]+', min_length=1, max_length=255)


class FaceAttributes(Enum):
    DEFAULT = 'DEFAULT'
    ALL = 'ALL'


class FaceId(
    RootModel[
        constr(pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')
    ]
):
    root: constr(
        pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    )


class FaceIdList(RootModel[List[FaceId]]):
    root: List[FaceId] = Field(..., max_length=4096, min_length=1)


class FaceSearchSortBy(Enum):
    INDEX = 'INDEX'
    TIMESTAMP = 'TIMESTAMP'


class Float(RootModel[float]):
    root: float


class FlowDefinitionArn(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class GenderType(Enum):
    Male = 'Male'
    Female = 'Female'


class GeneralLabelsFilterValue(
    RootModel[
        constr(pattern=r'[A-Za-z0-9àâèçñó\'-_(). ]*', min_length=0, max_length=50)
    ]
):
    root: constr(pattern=r'[A-Za-z0-9àâèçñó\'-_(). ]*', min_length=0, max_length=50)


class GroundTruthBlob(RootModel[constr(min_length=1, max_length=5242880)]):
    root: constr(min_length=1, max_length=5242880)


class HasErrors(RootModel[bool]):
    root: bool


class HumanLoopActivationConditionsEvaluationResults(
    RootModel[constr(max_length=10240)]
):
    root: constr(max_length=10240)


class HumanLoopActivationReason(RootModel[str]):
    root: str


class HumanLoopActivationReasons(RootModel[List[HumanLoopActivationReason]]):
    root: List[HumanLoopActivationReason] = Field(..., min_length=1)


class HumanLoopArn(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class HumanLoopDataAttributes(BaseModel):
    ContentClassifiers_1: Optional[ContentClassifiers] = Field(
        None, alias='ContentClassifiers'
    )


class HumanLoopName(
    RootModel[constr(pattern=r'^[a-z0-9](-*[a-z0-9])*', min_length=1, max_length=63)]
):
    root: constr(pattern=r'^[a-z0-9](-*[a-z0-9])*', min_length=1, max_length=63)


class HumanLoopQuotaExceededException(RootModel[Any]):
    root: Any


class IdempotentParameterMismatchException(RootModel[Any]):
    root: Any


class ImageBlob(RootModel[constr(min_length=1, max_length=5242880)]):
    root: constr(min_length=1, max_length=5242880)


class ImageId(
    RootModel[
        constr(pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')
    ]
):
    root: constr(
        pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    )


class ImageQuality(BaseModel):
    Brightness: Optional[Float] = None
    Sharpness: Optional[Float] = None


class ImageTooLargeException(RootModel[Any]):
    root: Any


class IndexFacesModelVersion(RootModel[constr(pattern=r'[0-9\.]+')]):
    root: constr(pattern=r'[0-9\.]+')


class InferenceUnits(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class InternalServerError(RootModel[Any]):
    root: Any


class InvalidImageFormatException(RootModel[Any]):
    root: Any


class InvalidPaginationTokenException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidPolicyRevisionIdException(RootModel[Any]):
    root: Any


class InvalidS3ObjectException(RootModel[Any]):
    root: Any


class IsLabeled(RootModel[bool]):
    root: bool


class JobId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)


class JobTag(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.\-:]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.\-:]+', min_length=1, max_length=256)


class KinesisDataArn(
    RootModel[constr(pattern=r'(^arn:([a-z\d-]+):kinesis:([a-z\d-]+):\d{12}:.+$)')]
):
    root: constr(pattern=r'(^arn:([a-z\d-]+):kinesis:([a-z\d-]+):\d{12}:.+$)')


class KinesisDataStream(BaseModel):
    Arn: Optional[KinesisDataArn] = None


class KinesisVideoArn(
    RootModel[constr(pattern=r'(^arn:([a-z\d-]+):kinesisvideo:([a-z\d-]+):\d{12}:.+$)')]
):
    root: constr(pattern=r'(^arn:([a-z\d-]+):kinesisvideo:([a-z\d-]+):\d{12}:.+$)')


class KinesisVideoStream(BaseModel):
    Arn: Optional[KinesisVideoArn] = None


class KinesisVideoStreamFragmentNumber(
    RootModel[constr(pattern=r'^[0-9]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[0-9]+$', min_length=1, max_length=128)


class KmsKeyId(
    RootModel[
        constr(
            pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
        min_length=1,
        max_length=2048,
    )


class KnownGenderType(Enum):
    Male = 'Male'
    Female = 'Female'
    Nonbinary = 'Nonbinary'
    Unlisted = 'Unlisted'


class LabelDetectionAggregateBy(Enum):
    TIMESTAMPS = 'TIMESTAMPS'
    SEGMENTS = 'SEGMENTS'


class LabelDetectionFeatureName(Enum):
    GENERAL_LABELS = 'GENERAL_LABELS'


class LabelDetectionSortBy(Enum):
    NAME = 'NAME'
    TIMESTAMP = 'TIMESTAMP'


class LandmarkType(Enum):
    eyeLeft = 'eyeLeft'
    eyeRight = 'eyeRight'
    nose = 'nose'
    mouthLeft = 'mouthLeft'
    mouthRight = 'mouthRight'
    leftEyeBrowLeft = 'leftEyeBrowLeft'
    leftEyeBrowRight = 'leftEyeBrowRight'
    leftEyeBrowUp = 'leftEyeBrowUp'
    rightEyeBrowLeft = 'rightEyeBrowLeft'
    rightEyeBrowRight = 'rightEyeBrowRight'
    rightEyeBrowUp = 'rightEyeBrowUp'
    leftEyeLeft = 'leftEyeLeft'
    leftEyeRight = 'leftEyeRight'
    leftEyeUp = 'leftEyeUp'
    leftEyeDown = 'leftEyeDown'
    rightEyeLeft = 'rightEyeLeft'
    rightEyeRight = 'rightEyeRight'
    rightEyeUp = 'rightEyeUp'
    rightEyeDown = 'rightEyeDown'
    noseLeft = 'noseLeft'
    noseRight = 'noseRight'
    mouthUp = 'mouthUp'
    mouthDown = 'mouthDown'
    leftPupil = 'leftPupil'
    rightPupil = 'rightPupil'
    upperJawlineLeft = 'upperJawlineLeft'
    midJawlineLeft = 'midJawlineLeft'
    chinBottom = 'chinBottom'
    midJawlineRight = 'midJawlineRight'
    upperJawlineRight = 'upperJawlineRight'


class LimitExceededException(RootModel[Any]):
    root: Any


class ListDatasetEntriesPageSize(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ListDatasetLabelsPageSize(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ListDatasetLabelsRequest(BaseModel):
    DatasetArn_1: DatasetArn = Field(..., alias='DatasetArn')
    MaxResults: Optional[ListDatasetLabelsPageSize] = None
    NextToken: Optional[ExtendedPaginationToken] = None


class ListProjectPoliciesPageSize(RootModel[conint(ge=1, le=5)]):
    root: conint(ge=1, le=5)


class LivenessImageBlob(RootModel[SecretStr]):
    root: SecretStr


class LivenessS3KeyPrefix(RootModel[constr(pattern=r'\S*', max_length=950)]):
    root: constr(pattern=r'\S*', max_length=950)


class LivenessSessionId(
    RootModel[
        constr(
            pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}',
        min_length=1,
        max_length=255,
    )


class LivenessSessionStatus(Enum):
    CREATED = 'CREATED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class MalformedPolicyDocumentException(RootModel[Any]):
    root: Any


class MaxDurationInSecondsULong(RootModel[conint(ge=1, le=120)]):
    root: conint(ge=1, le=120)


class MaxFaces(RootModel[conint(ge=1, le=4096)]):
    root: conint(ge=1, le=4096)


class MaxFacesToIndex(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxPixelThreshold(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class MaxResults(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MinCoveragePercentage(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class OrientationCorrection(Enum):
    ROTATE_0 = 'ROTATE_0'
    ROTATE_90 = 'ROTATE_90'
    ROTATE_180 = 'ROTATE_180'
    ROTATE_270 = 'ROTATE_270'


class PageSize(RootModel[conint(ge=0, le=4096)]):
    root: conint(ge=0, le=4096)


class PaginationToken(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class Percent(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class PersonIndex(RootModel[int]):
    root: int


class PersonTrackingSortBy(Enum):
    INDEX = 'INDEX'
    TIMESTAMP = 'TIMESTAMP'


class Point(BaseModel):
    X: Optional[Float] = None
    Y: Optional[Float] = None


class Polygon(RootModel[List[Point]]):
    root: List[Point]


class Pose(BaseModel):
    Pitch: Optional[Degree] = None
    Roll: Optional[Degree] = None
    Yaw: Optional[Degree] = None


class ProjectArn(
    RootModel[
        constr(
            pattern=r'(^arn:[a-z\d-]+:rekognition:[a-z\d-]+:\d{12}:project\/[a-zA-Z0-9_.\-]{1,255}\/[0-9]+$)',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'(^arn:[a-z\d-]+:rekognition:[a-z\d-]+:\d{12}:project\/[a-zA-Z0-9_.\-]{1,255}\/[0-9]+$)',
        min_length=20,
        max_length=2048,
    )


class ProjectName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.\-]+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.\-]+', min_length=1, max_length=255)


class ProjectNames(RootModel[List[ProjectName]]):
    root: List[ProjectName] = Field(..., max_length=10, min_length=1)


class ProjectPolicyDocument(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=2000
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=2000
    )


class ProjectPolicyName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.\-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.\-]+', min_length=1, max_length=128)


class ProjectPolicyRevisionId(
    RootModel[constr(pattern=r'[0-9A-Fa-f]+', max_length=64)]
):
    root: constr(pattern=r'[0-9A-Fa-f]+', max_length=64)


class ProjectStatus(Enum):
    CREATING = 'CREATING'
    CREATED = 'CREATED'
    DELETING = 'DELETING'


class ProjectVersionArn(
    RootModel[
        constr(
            pattern=r'(^arn:[a-z\d-]+:rekognition:[a-z\d-]+:\d{12}:project\/[a-zA-Z0-9_.\-]{1,255}\/version\/[a-zA-Z0-9_.\-]{1,255}\/[0-9]+$)',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'(^arn:[a-z\d-]+:rekognition:[a-z\d-]+:\d{12}:project\/[a-zA-Z0-9_.\-]{1,255}\/version\/[a-zA-Z0-9_.\-]{1,255}\/[0-9]+$)',
        min_length=20,
        max_length=2048,
    )


class ProjectVersionStatus(Enum):
    TRAINING_IN_PROGRESS = 'TRAINING_IN_PROGRESS'
    TRAINING_COMPLETED = 'TRAINING_COMPLETED'
    TRAINING_FAILED = 'TRAINING_FAILED'
    STARTING = 'STARTING'
    RUNNING = 'RUNNING'
    FAILED = 'FAILED'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    DELETING = 'DELETING'
    COPYING_IN_PROGRESS = 'COPYING_IN_PROGRESS'
    COPYING_COMPLETED = 'COPYING_COMPLETED'
    COPYING_FAILED = 'COPYING_FAILED'


class ProjectVersionsPageSize(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ProjectsPageSize(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ProtectiveEquipmentType(Enum):
    FACE_COVER = 'FACE_COVER'
    HAND_COVER = 'HAND_COVER'
    HEAD_COVER = 'HEAD_COVER'


class ProtectiveEquipmentTypes(RootModel[List[ProtectiveEquipmentType]]):
    root: List[ProtectiveEquipmentType]


class ProvisionedThroughputExceededException(RootModel[Any]):
    root: Any


class PutProjectPolicyRequest(BaseModel):
    PolicyDocument: ProjectPolicyDocument
    PolicyName: ProjectPolicyName
    PolicyRevisionId: Optional[ProjectPolicyRevisionId] = None
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')


class PutProjectPolicyResponse(BaseModel):
    PolicyRevisionId: Optional[ProjectPolicyRevisionId] = None


class QualityFilter(Enum):
    NONE = 'NONE'
    AUTO = 'AUTO'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'


class QueryString(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=2048)


class Reason(Enum):
    EXCEEDS_MAX_FACES = 'EXCEEDS_MAX_FACES'
    EXTREME_POSE = 'EXTREME_POSE'
    LOW_BRIGHTNESS = 'LOW_BRIGHTNESS'
    LOW_SHARPNESS = 'LOW_SHARPNESS'
    LOW_CONFIDENCE = 'LOW_CONFIDENCE'
    SMALL_BOUNDING_BOX = 'SMALL_BOUNDING_BOX'
    LOW_FACE_QUALITY = 'LOW_FACE_QUALITY'


class Reasons(RootModel[List[Reason]]):
    root: List[Reason]


class RekognitionUniqueId(RootModel[constr(pattern=r'[0-9A-Za-z]*')]):
    root: constr(pattern=r'[0-9A-Za-z]*')


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceArn(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceNotReadyException(RootModel[Any]):
    root: Any


class RoleArn(
    RootModel[constr(pattern=r'arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+')]
):
    root: constr(pattern=r'arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+')


class S3Bucket(
    RootModel[constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=3, max_length=255)]
):
    root: constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=3, max_length=255)


class S3KeyPrefix(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class S3ObjectName(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class S3ObjectVersion(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class SNSTopicArn(RootModel[constr(pattern=r'(^arn:aws:sns:.*:\w{12}:.+$)')]):
    root: constr(pattern=r'(^arn:aws:sns:.*:\w{12}:.+$)')


class SearchFacesRequest(BaseModel):
    CollectionId_1: CollectionId = Field(..., alias='CollectionId')
    FaceId_1: FaceId = Field(..., alias='FaceId')
    FaceMatchThreshold: Optional[Percent] = None
    MaxFaces_1: Optional[MaxFaces] = Field(None, alias='MaxFaces')


class SegmentConfidence(RootModel[confloat(ge=50.0, le=100.0)]):
    root: confloat(ge=50.0, le=100.0)


class SegmentType(Enum):
    TECHNICAL_CUE = 'TECHNICAL_CUE'
    SHOT = 'SHOT'


class SegmentTypes(RootModel[List[SegmentType]]):
    root: List[SegmentType] = Field(..., min_length=1)


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SessionNotFoundException(RootModel[Any]):
    root: Any


class Smile(BaseModel):
    Confidence: Optional[Percent] = None
    Value: Optional[Boolean] = None


class StartCelebrityRecognitionResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartContentModerationResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartFaceDetectionResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartFaceSearchResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartLabelDetectionResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartPersonTrackingResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartProjectVersionRequest(BaseModel):
    MaxInferenceUnits: Optional[InferenceUnits] = None
    MinInferenceUnits: InferenceUnits
    ProjectVersionArn_1: ProjectVersionArn = Field(..., alias='ProjectVersionArn')


class StartProjectVersionResponse(BaseModel):
    Status: Optional[ProjectVersionStatus] = None


class StartSegmentDetectionResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StartShotDetectionFilter(BaseModel):
    MinSegmentConfidence: Optional[SegmentConfidence] = None


class StartStreamProcessorSessionId(RootModel[str]):
    root: str


class StartTextDetectionResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class StatusMessage(RootModel[str]):
    root: str


class StopProjectVersionRequest(BaseModel):
    ProjectVersionArn_1: ProjectVersionArn = Field(..., alias='ProjectVersionArn')


class StopProjectVersionResponse(BaseModel):
    Status: Optional[ProjectVersionStatus] = None


class StopStreamProcessorResponse(BaseModel):
    pass


class StreamProcessingStopSelector(BaseModel):
    MaxDurationInSeconds: Optional[MaxDurationInSecondsULong] = None


class StreamProcessorArn(
    RootModel[
        constr(
            pattern=r'(^arn:[a-z\d-]+:rekognition:[a-z\d-]+:\d{12}:streamprocessor\/.+$)'
        )
    ]
):
    root: constr(
        pattern=r'(^arn:[a-z\d-]+:rekognition:[a-z\d-]+:\d{12}:streamprocessor\/.+$)'
    )


class StreamProcessorDataSharingPreference(BaseModel):
    OptIn: Boolean


class StreamProcessorInput(BaseModel):
    KinesisVideoStream_1: Optional[KinesisVideoStream] = Field(
        None, alias='KinesisVideoStream'
    )


class StreamProcessorName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.\-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.\-]+', min_length=1, max_length=128)


class StreamProcessorNotificationChannel(BaseModel):
    SNSTopicArn_1: SNSTopicArn = Field(..., alias='SNSTopicArn')


class StreamProcessorParameterToDelete(Enum):
    ConnectedHomeMinConfidence = 'ConnectedHomeMinConfidence'
    RegionsOfInterest = 'RegionsOfInterest'


class StreamProcessorParametersToDelete(
    RootModel[List[StreamProcessorParameterToDelete]]
):
    root: List[StreamProcessorParameterToDelete]


class StreamProcessorStatus(Enum):
    STOPPED = 'STOPPED'
    STARTING = 'STARTING'
    RUNNING = 'RUNNING'
    FAILED = 'FAILED'
    STOPPING = 'STOPPING'
    UPDATING = 'UPDATING'


class String(RootModel[str]):
    root: str


class Sunglasses(BaseModel):
    Confidence: Optional[Percent] = None
    Value: Optional[Boolean] = None


class TagKey(
    RootModel[
        constr(
            pattern=r'^(?!aws:)[\p{L}\p{Z}\p{N}_.:/=+\-@]*$',
            min_length=1,
            max_length=128,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(?!aws:)[\p{L}\p{Z}\p{N}_.:/=+\-@]*$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TechnicalCueType(Enum):
    ColorBars = 'ColorBars'
    EndCredits = 'EndCredits'
    BlackFrames = 'BlackFrames'
    OpeningCredits = 'OpeningCredits'
    StudioLogo = 'StudioLogo'
    Slate = 'Slate'
    Content = 'Content'


class TextTypes(Enum):
    LINE = 'LINE'
    WORD = 'WORD'


class ThrottlingException(RootModel[Any]):
    root: Any


class Timecode(RootModel[str]):
    root: str


class Timestamp(RootModel[int]):
    root: int


class UInteger(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ULong(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class UntagResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateDatasetEntriesResponse(BaseModel):
    pass


class UpdateStreamProcessorResponse(BaseModel):
    pass


class Url(RootModel[str]):
    root: str


class Urls(RootModel[List[Url]]):
    root: List[Url] = Field(..., max_length=255, min_length=0)


class VersionName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.\-]+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.\-]+', min_length=1, max_length=255)


class VersionNames(RootModel[List[VersionName]]):
    root: List[VersionName] = Field(..., max_length=10, min_length=1)


class VideoColorRange(Enum):
    FULL = 'FULL'
    LIMITED = 'LIMITED'


class VideoJobStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class VideoMetadata(BaseModel):
    Codec: Optional[String] = None
    ColorRange: Optional[VideoColorRange] = None
    DurationMillis: Optional[ULong] = None
    Format: Optional[String] = None
    FrameHeight: Optional[ULong] = None
    FrameRate: Optional[Float] = None
    FrameWidth: Optional[ULong] = None


class VideoMetadataList(RootModel[List[VideoMetadata]]):
    root: List[VideoMetadata]


class VideoTooLargeException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    RekognitionService_CompareFaces = 'RekognitionService.CompareFaces'


class XAmzTarget1(Enum):
    RekognitionService_CopyProjectVersion = 'RekognitionService.CopyProjectVersion'


class XAmzTarget2(Enum):
    RekognitionService_CreateCollection = 'RekognitionService.CreateCollection'


class XAmzTarget3(Enum):
    RekognitionService_CreateDataset = 'RekognitionService.CreateDataset'


class XAmzTarget4(Enum):
    RekognitionService_CreateFaceLivenessSession = (
        'RekognitionService.CreateFaceLivenessSession'
    )


class XAmzTarget5(Enum):
    RekognitionService_CreateProject = 'RekognitionService.CreateProject'


class XAmzTarget6(Enum):
    RekognitionService_CreateProjectVersion = 'RekognitionService.CreateProjectVersion'


class XAmzTarget7(Enum):
    RekognitionService_CreateStreamProcessor = (
        'RekognitionService.CreateStreamProcessor'
    )


class XAmzTarget8(Enum):
    RekognitionService_DeleteCollection = 'RekognitionService.DeleteCollection'


class XAmzTarget9(Enum):
    RekognitionService_DeleteDataset = 'RekognitionService.DeleteDataset'


class XAmzTarget10(Enum):
    RekognitionService_DeleteFaces = 'RekognitionService.DeleteFaces'


class XAmzTarget11(Enum):
    RekognitionService_DeleteProject = 'RekognitionService.DeleteProject'


class XAmzTarget12(Enum):
    RekognitionService_DeleteProjectPolicy = 'RekognitionService.DeleteProjectPolicy'


class XAmzTarget13(Enum):
    RekognitionService_DeleteProjectVersion = 'RekognitionService.DeleteProjectVersion'


class XAmzTarget14(Enum):
    RekognitionService_DeleteStreamProcessor = (
        'RekognitionService.DeleteStreamProcessor'
    )


class XAmzTarget15(Enum):
    RekognitionService_DescribeCollection = 'RekognitionService.DescribeCollection'


class XAmzTarget16(Enum):
    RekognitionService_DescribeDataset = 'RekognitionService.DescribeDataset'


class XAmzTarget17(Enum):
    RekognitionService_DescribeProjectVersions = (
        'RekognitionService.DescribeProjectVersions'
    )


class XAmzTarget18(Enum):
    RekognitionService_DescribeProjects = 'RekognitionService.DescribeProjects'


class XAmzTarget19(Enum):
    RekognitionService_DescribeStreamProcessor = (
        'RekognitionService.DescribeStreamProcessor'
    )


class XAmzTarget20(Enum):
    RekognitionService_DetectCustomLabels = 'RekognitionService.DetectCustomLabels'


class XAmzTarget21(Enum):
    RekognitionService_DetectFaces = 'RekognitionService.DetectFaces'


class XAmzTarget22(Enum):
    RekognitionService_DetectLabels = 'RekognitionService.DetectLabels'


class XAmzTarget23(Enum):
    RekognitionService_DetectModerationLabels = (
        'RekognitionService.DetectModerationLabels'
    )


class XAmzTarget24(Enum):
    RekognitionService_DetectProtectiveEquipment = (
        'RekognitionService.DetectProtectiveEquipment'
    )


class XAmzTarget25(Enum):
    RekognitionService_DetectText = 'RekognitionService.DetectText'


class XAmzTarget26(Enum):
    RekognitionService_DistributeDatasetEntries = (
        'RekognitionService.DistributeDatasetEntries'
    )


class XAmzTarget27(Enum):
    RekognitionService_GetCelebrityInfo = 'RekognitionService.GetCelebrityInfo'


class XAmzTarget28(Enum):
    RekognitionService_GetCelebrityRecognition = (
        'RekognitionService.GetCelebrityRecognition'
    )


class XAmzTarget29(Enum):
    RekognitionService_GetContentModeration = 'RekognitionService.GetContentModeration'


class XAmzTarget30(Enum):
    RekognitionService_GetFaceDetection = 'RekognitionService.GetFaceDetection'


class XAmzTarget31(Enum):
    RekognitionService_GetFaceLivenessSessionResults = (
        'RekognitionService.GetFaceLivenessSessionResults'
    )


class XAmzTarget32(Enum):
    RekognitionService_GetFaceSearch = 'RekognitionService.GetFaceSearch'


class XAmzTarget33(Enum):
    RekognitionService_GetLabelDetection = 'RekognitionService.GetLabelDetection'


class XAmzTarget34(Enum):
    RekognitionService_GetPersonTracking = 'RekognitionService.GetPersonTracking'


class XAmzTarget35(Enum):
    RekognitionService_GetSegmentDetection = 'RekognitionService.GetSegmentDetection'


class XAmzTarget36(Enum):
    RekognitionService_GetTextDetection = 'RekognitionService.GetTextDetection'


class XAmzTarget37(Enum):
    RekognitionService_IndexFaces = 'RekognitionService.IndexFaces'


class XAmzTarget38(Enum):
    RekognitionService_ListCollections = 'RekognitionService.ListCollections'


class XAmzTarget39(Enum):
    RekognitionService_ListDatasetEntries = 'RekognitionService.ListDatasetEntries'


class XAmzTarget40(Enum):
    RekognitionService_ListDatasetLabels = 'RekognitionService.ListDatasetLabels'


class XAmzTarget41(Enum):
    RekognitionService_ListFaces = 'RekognitionService.ListFaces'


class XAmzTarget42(Enum):
    RekognitionService_ListProjectPolicies = 'RekognitionService.ListProjectPolicies'


class XAmzTarget43(Enum):
    RekognitionService_ListStreamProcessors = 'RekognitionService.ListStreamProcessors'


class XAmzTarget44(Enum):
    RekognitionService_ListTagsForResource = 'RekognitionService.ListTagsForResource'


class XAmzTarget45(Enum):
    RekognitionService_PutProjectPolicy = 'RekognitionService.PutProjectPolicy'


class XAmzTarget46(Enum):
    RekognitionService_RecognizeCelebrities = 'RekognitionService.RecognizeCelebrities'


class XAmzTarget47(Enum):
    RekognitionService_SearchFaces = 'RekognitionService.SearchFaces'


class XAmzTarget48(Enum):
    RekognitionService_SearchFacesByImage = 'RekognitionService.SearchFacesByImage'


class XAmzTarget49(Enum):
    RekognitionService_StartCelebrityRecognition = (
        'RekognitionService.StartCelebrityRecognition'
    )


class XAmzTarget50(Enum):
    RekognitionService_StartContentModeration = (
        'RekognitionService.StartContentModeration'
    )


class XAmzTarget51(Enum):
    RekognitionService_StartFaceDetection = 'RekognitionService.StartFaceDetection'


class XAmzTarget52(Enum):
    RekognitionService_StartFaceSearch = 'RekognitionService.StartFaceSearch'


class XAmzTarget53(Enum):
    RekognitionService_StartLabelDetection = 'RekognitionService.StartLabelDetection'


class XAmzTarget54(Enum):
    RekognitionService_StartPersonTracking = 'RekognitionService.StartPersonTracking'


class XAmzTarget55(Enum):
    RekognitionService_StartProjectVersion = 'RekognitionService.StartProjectVersion'


class XAmzTarget56(Enum):
    RekognitionService_StartSegmentDetection = (
        'RekognitionService.StartSegmentDetection'
    )


class XAmzTarget57(Enum):
    RekognitionService_StartStreamProcessor = 'RekognitionService.StartStreamProcessor'


class XAmzTarget58(Enum):
    RekognitionService_StartTextDetection = 'RekognitionService.StartTextDetection'


class XAmzTarget59(Enum):
    RekognitionService_StopProjectVersion = 'RekognitionService.StopProjectVersion'


class XAmzTarget60(Enum):
    RekognitionService_StopStreamProcessor = 'RekognitionService.StopStreamProcessor'


class XAmzTarget61(Enum):
    RekognitionService_TagResource = 'RekognitionService.TagResource'


class XAmzTarget62(Enum):
    RekognitionService_UntagResource = 'RekognitionService.UntagResource'


class XAmzTarget63(Enum):
    RekognitionService_UpdateDatasetEntries = 'RekognitionService.UpdateDatasetEntries'


class XAmzTarget64(Enum):
    RekognitionService_UpdateStreamProcessor = (
        'RekognitionService.UpdateStreamProcessor'
    )


class AgeRange(BaseModel):
    High: Optional[UInteger] = None
    Low: Optional[UInteger] = None


class AudioMetadata(BaseModel):
    Codec: Optional[String] = None
    DurationMillis: Optional[ULong] = None
    NumberOfChannels: Optional[ULong] = None
    SampleRate: Optional[ULong] = None


class AudioMetadataList(RootModel[List[AudioMetadata]]):
    root: List[AudioMetadata]


class Beard(BaseModel):
    Confidence: Optional[Percent] = None
    Value: Optional[Boolean] = None


class BlackFrame(BaseModel):
    MaxPixelThreshold_1: Optional[MaxPixelThreshold] = Field(
        None, alias='MaxPixelThreshold'
    )
    MinCoveragePercentage_1: Optional[MinCoveragePercentage] = Field(
        None, alias='MinCoveragePercentage'
    )


class BoundingBox(BaseModel):
    Height: Optional[Float] = None
    Left: Optional[Float] = None
    Top: Optional[Float] = None
    Width: Optional[Float] = None


class ComparedSourceImageFace(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Confidence: Optional[Percent] = None


class ConnectedHomeSettings(BaseModel):
    Labels: ConnectedHomeLabels
    MinConfidence: Optional[Percent] = None


class ConnectedHomeSettingsForUpdate(BaseModel):
    Labels: Optional[ConnectedHomeLabels] = None
    MinConfidence: Optional[Percent] = None


class CopyProjectVersionResponse(BaseModel):
    ProjectVersionArn_1: Optional[ProjectVersionArn] = Field(
        None, alias='ProjectVersionArn'
    )


class CoversBodyPart(BaseModel):
    Confidence: Optional[Percent] = None
    Value: Optional[Boolean] = None


class CreateCollectionResponse(BaseModel):
    CollectionArn: Optional[String] = None
    FaceModelVersion: Optional[String] = None
    StatusCode: Optional[UInteger] = None


class CreateDatasetResponse(BaseModel):
    DatasetArn_1: Optional[DatasetArn] = Field(None, alias='DatasetArn')


class CreateFaceLivenessSessionResponse(BaseModel):
    SessionId: LivenessSessionId


class CreateProjectRequest(BaseModel):
    ProjectName_1: ProjectName = Field(..., alias='ProjectName')


class CreateProjectResponse(BaseModel):
    ProjectArn_1: Optional[ProjectArn] = Field(None, alias='ProjectArn')


class CreateProjectVersionResponse(BaseModel):
    ProjectVersionArn_1: Optional[ProjectVersionArn] = Field(
        None, alias='ProjectVersionArn'
    )


class CreateStreamProcessorResponse(BaseModel):
    StreamProcessorArn_1: Optional[StreamProcessorArn] = Field(
        None, alias='StreamProcessorArn'
    )


class DatasetChanges(BaseModel):
    GroundTruth: GroundTruthBlob


class DatasetEntries(RootModel[List[DatasetEntry]]):
    root: List[DatasetEntry]


class DatasetLabelStats(BaseModel):
    BoundingBoxCount: Optional[UInteger] = None
    EntryCount: Optional[UInteger] = None


class DatasetMetadata(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    DatasetArn_1: Optional[DatasetArn] = Field(None, alias='DatasetArn')
    DatasetType_1: Optional[DatasetType] = Field(None, alias='DatasetType')
    Status: Optional[DatasetStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    StatusMessageCode: Optional[DatasetStatusMessageCode] = None


class DatasetMetadataList(RootModel[List[DatasetMetadata]]):
    root: List[DatasetMetadata]


class DatasetStats(BaseModel):
    ErrorEntries: Optional[UInteger] = None
    LabeledEntries: Optional[UInteger] = None
    TotalEntries: Optional[UInteger] = None
    TotalLabels: Optional[UInteger] = None


class DeleteCollectionResponse(BaseModel):
    StatusCode: Optional[UInteger] = None


class DeleteFacesRequest(BaseModel):
    CollectionId_1: CollectionId = Field(..., alias='CollectionId')
    FaceIds: FaceIdList


class DeleteFacesResponse(BaseModel):
    DeletedFaces: Optional[FaceIdList] = None


class DeleteProjectPolicyRequest(BaseModel):
    PolicyName: ProjectPolicyName
    PolicyRevisionId: Optional[ProjectPolicyRevisionId] = None
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')


class DeleteProjectRequest(BaseModel):
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')


class DeleteProjectResponse(BaseModel):
    Status: Optional[ProjectStatus] = None


class DeleteProjectVersionRequest(BaseModel):
    ProjectVersionArn_1: ProjectVersionArn = Field(..., alias='ProjectVersionArn')


class DeleteProjectVersionResponse(BaseModel):
    Status: Optional[ProjectVersionStatus] = None


class DeleteStreamProcessorRequest(BaseModel):
    Name: StreamProcessorName


class DescribeCollectionResponse(BaseModel):
    CollectionARN: Optional[String] = None
    CreationTimestamp: Optional[DateTime] = None
    FaceCount: Optional[ULong] = None
    FaceModelVersion: Optional[String] = None


class DescribeProjectVersionsRequest(BaseModel):
    MaxResults: Optional[ProjectVersionsPageSize] = None
    NextToken: Optional[ExtendedPaginationToken] = None
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')
    VersionNames_1: Optional[VersionNames] = Field(None, alias='VersionNames')


class DescribeProjectsRequest(BaseModel):
    MaxResults: Optional[ProjectsPageSize] = None
    NextToken: Optional[ExtendedPaginationToken] = None
    ProjectNames_1: Optional[ProjectNames] = Field(None, alias='ProjectNames')


class DescribeStreamProcessorRequest(BaseModel):
    Name: StreamProcessorName


class DetectLabelsFeatureList(RootModel[List[DetectLabelsFeatureName]]):
    root: List[DetectLabelsFeatureName] = Field(..., max_length=2, min_length=0)


class DetectLabelsImagePropertiesSettings(BaseModel):
    MaxDominantColors: Optional[DetectLabelsMaxDominantColors] = None


class DetectLabelsImageQuality(BaseModel):
    Brightness: Optional[Float] = None
    Contrast: Optional[Float] = None
    Sharpness: Optional[Float] = None


class DetectionFilter(BaseModel):
    MinBoundingBoxHeight: Optional[BoundingBoxHeight] = None
    MinBoundingBoxWidth: Optional[BoundingBoxWidth] = None
    MinConfidence: Optional[Percent] = None


class DistributeDatasetEntriesRequest(BaseModel):
    Datasets: DistributeDatasetMetadataList


class DominantColor(BaseModel):
    Blue: Optional[UInteger] = None
    CSSColor: Optional[String] = None
    Green: Optional[UInteger] = None
    HexCode: Optional[String] = None
    PixelPercent: Optional[Percent] = None
    Red: Optional[UInteger] = None
    SimplifiedColor: Optional[String] = None


class DominantColors(RootModel[List[DominantColor]]):
    root: List[DominantColor]


class Emotion(BaseModel):
    Confidence: Optional[Percent] = None
    Type: Optional[EmotionName] = None


class Emotions(RootModel[List[Emotion]]):
    root: List[Emotion]


class EquipmentDetection(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Confidence: Optional[Percent] = None
    CoversBodyPart_1: Optional[CoversBodyPart] = Field(None, alias='CoversBodyPart')
    Type: Optional[ProtectiveEquipmentType] = None


class EquipmentDetections(RootModel[List[EquipmentDetection]]):
    root: List[EquipmentDetection]


class EyeOpen(BaseModel):
    Confidence: Optional[Percent] = None
    Value: Optional[Boolean] = None


class Eyeglasses(BaseModel):
    Confidence: Optional[Percent] = None
    Value: Optional[Boolean] = None


class Face(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Confidence: Optional[Percent] = None
    ExternalImageId_1: Optional[ExternalImageId] = Field(None, alias='ExternalImageId')
    FaceId_1: Optional[FaceId] = Field(None, alias='FaceId')
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    IndexFacesModelVersion_1: Optional[IndexFacesModelVersion] = Field(
        None, alias='IndexFacesModelVersion'
    )


class FaceList(RootModel[List[Face]]):
    root: List[Face]


class FaceMatch(BaseModel):
    Face_1: Optional[Face] = Field(None, alias='Face')
    Similarity: Optional[Percent] = None


class FaceMatchList(RootModel[List[FaceMatch]]):
    root: List[FaceMatch]


class FaceModelVersionList(RootModel[List[String]]):
    root: List[String]


class FaceSearchSettings(BaseModel):
    CollectionId_1: Optional[CollectionId] = Field(None, alias='CollectionId')
    FaceMatchThreshold: Optional[Percent] = None


class Gender(BaseModel):
    Confidence: Optional[Percent] = None
    Value: Optional[GenderType] = None


class GeneralLabelsFilterList(RootModel[List[GeneralLabelsFilterValue]]):
    root: List[GeneralLabelsFilterValue] = Field(..., max_length=100, min_length=0)


class GeneralLabelsSettings(BaseModel):
    LabelCategoryExclusionFilters: Optional[GeneralLabelsFilterList] = None
    LabelCategoryInclusionFilters: Optional[GeneralLabelsFilterList] = None
    LabelExclusionFilters: Optional[GeneralLabelsFilterList] = None
    LabelInclusionFilters: Optional[GeneralLabelsFilterList] = None


class Geometry(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Polygon_1: Optional[Polygon] = Field(None, alias='Polygon')


class GetCelebrityInfoRequest(BaseModel):
    Id: RekognitionUniqueId


class GetCelebrityRecognitionRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    SortBy: Optional[CelebrityRecognitionSortBy] = None


class GetContentModerationRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    SortBy: Optional[ContentModerationSortBy] = None


class GetFaceDetectionRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class GetFaceLivenessSessionResultsRequest(BaseModel):
    SessionId: LivenessSessionId


class GetFaceSearchRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    SortBy: Optional[FaceSearchSortBy] = None


class GetLabelDetectionRequest(BaseModel):
    AggregateBy: Optional[LabelDetectionAggregateBy] = None
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    SortBy: Optional[LabelDetectionSortBy] = None


class GetPersonTrackingRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    SortBy: Optional[PersonTrackingSortBy] = None


class GetSegmentDetectionRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class GetTextDetectionRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class HumanLoopActivationOutput(BaseModel):
    HumanLoopActivationConditionsEvaluationResults_1: Optional[
        HumanLoopActivationConditionsEvaluationResults
    ] = Field(None, alias='HumanLoopActivationConditionsEvaluationResults')
    HumanLoopActivationReasons_1: Optional[HumanLoopActivationReasons] = Field(
        None, alias='HumanLoopActivationReasons'
    )
    HumanLoopArn_1: Optional[HumanLoopArn] = Field(None, alias='HumanLoopArn')


class HumanLoopConfig(BaseModel):
    DataAttributes: Optional[HumanLoopDataAttributes] = None
    FlowDefinitionArn_1: FlowDefinitionArn = Field(..., alias='FlowDefinitionArn')
    HumanLoopName_1: HumanLoopName = Field(..., alias='HumanLoopName')


class Instance(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Confidence: Optional[Percent] = None
    DominantColors_1: Optional[DominantColors] = Field(None, alias='DominantColors')


class Instances(RootModel[List[Instance]]):
    root: List[Instance]


class KinesisVideoStreamStartSelector(BaseModel):
    FragmentNumber: Optional[KinesisVideoStreamFragmentNumber] = None
    ProducerTimestamp: Optional[ULong] = None


class KnownGender(BaseModel):
    Type: Optional[KnownGenderType] = None


class LabelAlias(BaseModel):
    Name: Optional[String] = None


class LabelAliases(RootModel[List[LabelAlias]]):
    root: List[LabelAlias]


class LabelCategory(BaseModel):
    Name: Optional[String] = None


class LabelDetectionFeatureList(RootModel[List[LabelDetectionFeatureName]]):
    root: List[LabelDetectionFeatureName] = Field(..., max_length=1, min_length=0)


class LabelDetectionSettings(BaseModel):
    GeneralLabels: Optional[GeneralLabelsSettings] = None


class Landmark(BaseModel):
    Type: Optional[LandmarkType] = None
    X: Optional[Float] = None
    Y: Optional[Float] = None


class Landmarks(RootModel[List[Landmark]]):
    root: List[Landmark]


class ListCollectionsRequest(BaseModel):
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[PaginationToken] = None


class ListCollectionsResponse(BaseModel):
    CollectionIds: Optional[CollectionIdList] = None
    FaceModelVersions: Optional[FaceModelVersionList] = None
    NextToken: Optional[PaginationToken] = None


class ListDatasetEntriesRequest(BaseModel):
    ContainsLabels: Optional[DatasetLabels] = None
    DatasetArn_1: DatasetArn = Field(..., alias='DatasetArn')
    HasErrors_1: Optional[HasErrors] = Field(None, alias='HasErrors')
    Labeled: Optional[IsLabeled] = None
    MaxResults: Optional[ListDatasetEntriesPageSize] = None
    NextToken: Optional[ExtendedPaginationToken] = None
    SourceRefContains: Optional[QueryString] = None


class ListDatasetEntriesResponse(BaseModel):
    DatasetEntries_1: Optional[DatasetEntries] = Field(None, alias='DatasetEntries')
    NextToken: Optional[ExtendedPaginationToken] = None


class ListFacesRequest(BaseModel):
    CollectionId_1: CollectionId = Field(..., alias='CollectionId')
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[PaginationToken] = None


class ListFacesResponse(BaseModel):
    FaceModelVersion: Optional[String] = None
    Faces: Optional[FaceList] = None
    NextToken: Optional[String] = None


class ListProjectPoliciesRequest(BaseModel):
    MaxResults: Optional[ListProjectPoliciesPageSize] = None
    NextToken: Optional[ExtendedPaginationToken] = None
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')


class ListStreamProcessorsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class LivenessOutputConfig(BaseModel):
    S3Bucket_1: S3Bucket = Field(..., alias='S3Bucket')
    S3KeyPrefix: Optional[LivenessS3KeyPrefix] = None


class ModerationLabel(BaseModel):
    Confidence: Optional[Percent] = None
    Name: Optional[String] = None
    ParentName: Optional[String] = None


class ModerationLabels(RootModel[List[ModerationLabel]]):
    root: List[ModerationLabel]


class MouthOpen(BaseModel):
    Confidence: Optional[Percent] = None
    Value: Optional[Boolean] = None


class Mustache(BaseModel):
    Confidence: Optional[Percent] = None
    Value: Optional[Boolean] = None


class NotificationChannel(BaseModel):
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    SNSTopicArn_1: SNSTopicArn = Field(..., alias='SNSTopicArn')


class OutputConfig(BaseModel):
    S3Bucket_1: Optional[S3Bucket] = Field(None, alias='S3Bucket')
    S3KeyPrefix_1: Optional[S3KeyPrefix] = Field(None, alias='S3KeyPrefix')


class Parent(BaseModel):
    Name: Optional[String] = None


class Parents(RootModel[List[Parent]]):
    root: List[Parent]


class ProjectDescription(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    Datasets: Optional[DatasetMetadataList] = None
    ProjectArn_1: Optional[ProjectArn] = Field(None, alias='ProjectArn')
    Status: Optional[ProjectStatus] = None


class ProjectDescriptions(RootModel[List[ProjectDescription]]):
    root: List[ProjectDescription]


class ProjectPolicy(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    LastUpdatedTimestamp: Optional[DateTime] = None
    PolicyDocument: Optional[ProjectPolicyDocument] = None
    PolicyName: Optional[ProjectPolicyName] = None
    PolicyRevisionId: Optional[ProjectPolicyRevisionId] = None
    ProjectArn_1: Optional[ProjectArn] = Field(None, alias='ProjectArn')


class ProtectiveEquipmentBodyPart(BaseModel):
    Confidence: Optional[Percent] = None
    EquipmentDetections_1: Optional[EquipmentDetections] = Field(
        None, alias='EquipmentDetections'
    )
    Name: Optional[BodyPart] = None


class ProtectiveEquipmentPersonIds(RootModel[List[UInteger]]):
    root: List[UInteger]


class ProtectiveEquipmentSummarizationAttributes(BaseModel):
    MinConfidence: Percent
    RequiredEquipmentTypes: ProtectiveEquipmentTypes


class ProtectiveEquipmentSummary(BaseModel):
    PersonsIndeterminate: Optional[ProtectiveEquipmentPersonIds] = None
    PersonsWithRequiredEquipment: Optional[ProtectiveEquipmentPersonIds] = None
    PersonsWithoutRequiredEquipment: Optional[ProtectiveEquipmentPersonIds] = None


class RegionOfInterest(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Polygon_1: Optional[Polygon] = Field(None, alias='Polygon')


class RegionsOfInterest(RootModel[List[RegionOfInterest]]):
    root: List[RegionOfInterest] = Field(..., max_length=10, min_length=0)


class S3Destination(BaseModel):
    Bucket: Optional[S3Bucket] = None
    KeyPrefix: Optional[S3KeyPrefix] = None


class S3Object(BaseModel):
    Bucket: Optional[S3Bucket] = None
    Name: Optional[S3ObjectName] = None
    Version: Optional[S3ObjectVersion] = None


class SearchFacesByImageResponse(BaseModel):
    FaceMatches: Optional[FaceMatchList] = None
    FaceModelVersion: Optional[String] = None
    SearchedFaceBoundingBox: Optional[BoundingBox] = None
    SearchedFaceConfidence: Optional[Percent] = None


class SearchFacesResponse(BaseModel):
    FaceMatches: Optional[FaceMatchList] = None
    FaceModelVersion: Optional[String] = None
    SearchedFaceId: Optional[FaceId] = None


class SegmentTypeInfo(BaseModel):
    ModelVersion: Optional[String] = None
    Type: Optional[SegmentType] = None


class SegmentTypesInfo(RootModel[List[SegmentTypeInfo]]):
    root: List[SegmentTypeInfo]


class ShotSegment(BaseModel):
    Confidence: Optional[SegmentConfidence] = None
    Index: Optional[ULong] = None


class StartStreamProcessorResponse(BaseModel):
    SessionId: Optional[StartStreamProcessorSessionId] = None


class StartTechnicalCueDetectionFilter(BaseModel):
    BlackFrame_1: Optional[BlackFrame] = Field(None, alias='BlackFrame')
    MinSegmentConfidence: Optional[SegmentConfidence] = None


class StartTextDetectionFilters(BaseModel):
    RegionsOfInterest_1: Optional[RegionsOfInterest] = Field(
        None, alias='RegionsOfInterest'
    )
    WordFilter: Optional[DetectionFilter] = None


class StopStreamProcessorRequest(BaseModel):
    Name: StreamProcessorName


class StreamProcessingStartSelector(BaseModel):
    KVSStreamStartSelector: Optional[KinesisVideoStreamStartSelector] = None


class StreamProcessor(BaseModel):
    Name: Optional[StreamProcessorName] = None
    Status: Optional[StreamProcessorStatus] = None


class StreamProcessorList(RootModel[List[StreamProcessor]]):
    root: List[StreamProcessor]


class StreamProcessorOutput(BaseModel):
    KinesisDataStream_1: Optional[KinesisDataStream] = Field(
        None, alias='KinesisDataStream'
    )
    S3Destination_1: Optional[S3Destination] = Field(None, alias='S3Destination')


class StreamProcessorSettings(BaseModel):
    ConnectedHome: Optional[ConnectedHomeSettings] = None
    FaceSearch: Optional[FaceSearchSettings] = None


class StreamProcessorSettingsForUpdate(BaseModel):
    ConnectedHomeForUpdate: Optional[ConnectedHomeSettingsForUpdate] = None


class Summary(BaseModel):
    S3Object_1: Optional[S3Object] = Field(None, alias='S3Object')


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    Tags: TagMap


class TechnicalCueSegment(BaseModel):
    Confidence: Optional[SegmentConfidence] = None
    Type: Optional[TechnicalCueType] = None


class TextDetection(BaseModel):
    Confidence: Optional[Percent] = None
    DetectedText: Optional[String] = None
    Geometry_1: Optional[Geometry] = Field(None, alias='Geometry')
    Id: Optional[UInteger] = None
    ParentId: Optional[UInteger] = None
    Type: Optional[TextTypes] = None


class TextDetectionList(RootModel[List[TextDetection]]):
    root: List[TextDetection]


class TextDetectionResult(BaseModel):
    TextDetection_1: Optional[TextDetection] = Field(None, alias='TextDetection')
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class TextDetectionResults(RootModel[List[TextDetectionResult]]):
    root: List[TextDetectionResult]


class UpdateDatasetEntriesRequest(BaseModel):
    Changes: DatasetChanges
    DatasetArn_1: DatasetArn = Field(..., alias='DatasetArn')


class UpdateStreamProcessorRequest(BaseModel):
    DataSharingPreferenceForUpdate: Optional[StreamProcessorDataSharingPreference] = (
        None
    )
    Name: StreamProcessorName
    ParametersToDelete: Optional[StreamProcessorParametersToDelete] = None
    RegionsOfInterestForUpdate: Optional[RegionsOfInterest] = None
    SettingsForUpdate: Optional[StreamProcessorSettingsForUpdate] = None


class Video(BaseModel):
    S3Object_1: Optional[S3Object] = Field(None, alias='S3Object')


class AuditImage(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Bytes: Optional[LivenessImageBlob] = None
    S3Object_1: Optional[S3Object] = Field(None, alias='S3Object')


class AuditImages(RootModel[List[AuditImage]]):
    root: List[AuditImage]


class BodyParts(RootModel[List[ProtectiveEquipmentBodyPart]]):
    root: List[ProtectiveEquipmentBodyPart]


class ComparedFace(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Confidence: Optional[Percent] = None
    Emotions_1: Optional[Emotions] = Field(None, alias='Emotions')
    Landmarks_1: Optional[Landmarks] = Field(None, alias='Landmarks')
    Pose_1: Optional[Pose] = Field(None, alias='Pose')
    Quality: Optional[ImageQuality] = None
    Smile_1: Optional[Smile] = Field(None, alias='Smile')


class ComparedFaceList(RootModel[List[ComparedFace]]):
    root: List[ComparedFace]


class ContentModerationDetection(BaseModel):
    ModerationLabel_1: Optional[ModerationLabel] = Field(None, alias='ModerationLabel')
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class ContentModerationDetections(RootModel[List[ContentModerationDetection]]):
    root: List[ContentModerationDetection]


class CopyProjectVersionRequest(BaseModel):
    DestinationProjectArn: ProjectArn
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    OutputConfig_1: OutputConfig = Field(..., alias='OutputConfig')
    SourceProjectArn: ProjectArn
    SourceProjectVersionArn: ProjectVersionArn
    Tags: Optional[TagMap] = None
    VersionName_1: VersionName = Field(..., alias='VersionName')


class CreateCollectionRequest(BaseModel):
    CollectionId_1: CollectionId = Field(..., alias='CollectionId')
    Tags: Optional[TagMap] = None


class CreateFaceLivenessSessionRequestSettings(BaseModel):
    AuditImagesLimit_1: Optional[AuditImagesLimit] = Field(
        None, alias='AuditImagesLimit'
    )
    OutputConfig: Optional[LivenessOutputConfig] = None


class CreateStreamProcessorRequest(BaseModel):
    DataSharingPreference: Optional[StreamProcessorDataSharingPreference] = None
    Input: StreamProcessorInput
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    Name: StreamProcessorName
    NotificationChannel: Optional[StreamProcessorNotificationChannel] = None
    Output: StreamProcessorOutput
    RegionsOfInterest_1: Optional[RegionsOfInterest] = Field(
        None, alias='RegionsOfInterest'
    )
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Settings: StreamProcessorSettings
    Tags: Optional[TagMap] = None


class CustomLabel(BaseModel):
    Confidence: Optional[Percent] = None
    Geometry_1: Optional[Geometry] = Field(None, alias='Geometry')
    Name: Optional[String] = None


class CustomLabels(RootModel[List[CustomLabel]]):
    root: List[CustomLabel]


class DatasetDescription(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    DatasetStats_1: Optional[DatasetStats] = Field(None, alias='DatasetStats')
    LastUpdatedTimestamp: Optional[DateTime] = None
    Status: Optional[DatasetStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    StatusMessageCode: Optional[DatasetStatusMessageCode] = None


class DatasetLabelDescription(BaseModel):
    LabelName: Optional[DatasetLabel] = None
    LabelStats: Optional[DatasetLabelStats] = None


class DatasetLabelDescriptions(RootModel[List[DatasetLabelDescription]]):
    root: List[DatasetLabelDescription]


class DescribeDatasetResponse(BaseModel):
    DatasetDescription_1: Optional[DatasetDescription] = Field(
        None, alias='DatasetDescription'
    )


class DescribeProjectsResponse(BaseModel):
    NextToken: Optional[ExtendedPaginationToken] = None
    ProjectDescriptions_1: Optional[ProjectDescriptions] = Field(
        None, alias='ProjectDescriptions'
    )


class DescribeStreamProcessorResponse(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    DataSharingPreference: Optional[StreamProcessorDataSharingPreference] = None
    Input: Optional[StreamProcessorInput] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    LastUpdateTimestamp: Optional[DateTime] = None
    Name: Optional[StreamProcessorName] = None
    NotificationChannel: Optional[StreamProcessorNotificationChannel] = None
    Output: Optional[StreamProcessorOutput] = None
    RegionsOfInterest_1: Optional[RegionsOfInterest] = Field(
        None, alias='RegionsOfInterest'
    )
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Settings: Optional[StreamProcessorSettings] = None
    Status: Optional[StreamProcessorStatus] = None
    StatusMessage: Optional[String] = None
    StreamProcessorArn_1: Optional[StreamProcessorArn] = Field(
        None, alias='StreamProcessorArn'
    )


class DetectCustomLabelsResponse(BaseModel):
    CustomLabels_1: Optional[CustomLabels] = Field(None, alias='CustomLabels')


class DetectLabelsImageBackground(BaseModel):
    DominantColors_1: Optional[DominantColors] = Field(None, alias='DominantColors')
    Quality: Optional[DetectLabelsImageQuality] = None


class DetectLabelsImageForeground(BaseModel):
    DominantColors_1: Optional[DominantColors] = Field(None, alias='DominantColors')
    Quality: Optional[DetectLabelsImageQuality] = None


class DetectLabelsImageProperties(BaseModel):
    Background: Optional[DetectLabelsImageBackground] = None
    DominantColors_1: Optional[DominantColors] = Field(None, alias='DominantColors')
    Foreground: Optional[DetectLabelsImageForeground] = None
    Quality: Optional[DetectLabelsImageQuality] = None


class DetectLabelsSettings(BaseModel):
    GeneralLabels: Optional[GeneralLabelsSettings] = None
    ImageProperties: Optional[DetectLabelsImagePropertiesSettings] = None


class DetectModerationLabelsResponse(BaseModel):
    HumanLoopActivationOutput_1: Optional[HumanLoopActivationOutput] = Field(
        None, alias='HumanLoopActivationOutput'
    )
    ModerationLabels_1: Optional[ModerationLabels] = Field(
        None, alias='ModerationLabels'
    )
    ModerationModelVersion: Optional[String] = None


class DetectTextFilters(BaseModel):
    RegionsOfInterest_1: Optional[RegionsOfInterest] = Field(
        None, alias='RegionsOfInterest'
    )
    WordFilter: Optional[DetectionFilter] = None


class DetectTextResponse(BaseModel):
    TextDetections: Optional[TextDetectionList] = None
    TextModelVersion: Optional[String] = None


class EvaluationResult(BaseModel):
    F1Score: Optional[Float] = None
    Summary_1: Optional[Summary] = Field(None, alias='Summary')


class FaceDetail(BaseModel):
    AgeRange_1: Optional[AgeRange] = Field(None, alias='AgeRange')
    Beard_1: Optional[Beard] = Field(None, alias='Beard')
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Confidence: Optional[Percent] = None
    Emotions_1: Optional[Emotions] = Field(None, alias='Emotions')
    Eyeglasses_1: Optional[Eyeglasses] = Field(None, alias='Eyeglasses')
    EyesOpen: Optional[EyeOpen] = None
    Gender_1: Optional[Gender] = Field(None, alias='Gender')
    Landmarks_1: Optional[Landmarks] = Field(None, alias='Landmarks')
    MouthOpen_1: Optional[MouthOpen] = Field(None, alias='MouthOpen')
    Mustache_1: Optional[Mustache] = Field(None, alias='Mustache')
    Pose_1: Optional[Pose] = Field(None, alias='Pose')
    Quality: Optional[ImageQuality] = None
    Smile_1: Optional[Smile] = Field(None, alias='Smile')
    Sunglasses_1: Optional[Sunglasses] = Field(None, alias='Sunglasses')


class FaceDetailList(RootModel[List[FaceDetail]]):
    root: List[FaceDetail]


class FaceDetection(BaseModel):
    Face: Optional[FaceDetail] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class FaceDetections(RootModel[List[FaceDetection]]):
    root: List[FaceDetection]


class FaceRecord(BaseModel):
    Face_1: Optional[Face] = Field(None, alias='Face')
    FaceDetail_1: Optional[FaceDetail] = Field(None, alias='FaceDetail')


class FaceRecordList(RootModel[List[FaceRecord]]):
    root: List[FaceRecord]


class GetCelebrityInfoResponse(BaseModel):
    KnownGender_1: Optional[KnownGender] = Field(None, alias='KnownGender')
    Name: Optional[String] = None
    Urls_1: Optional[Urls] = Field(None, alias='Urls')


class GetContentModerationResponse(BaseModel):
    JobStatus: Optional[VideoJobStatus] = None
    ModerationLabels: Optional[ContentModerationDetections] = None
    ModerationModelVersion: Optional[String] = None
    NextToken: Optional[PaginationToken] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    VideoMetadata_1: Optional[VideoMetadata] = Field(None, alias='VideoMetadata')


class GetFaceDetectionResponse(BaseModel):
    Faces: Optional[FaceDetections] = None
    JobStatus: Optional[VideoJobStatus] = None
    NextToken: Optional[PaginationToken] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    VideoMetadata_1: Optional[VideoMetadata] = Field(None, alias='VideoMetadata')


class GetFaceLivenessSessionResultsResponse(BaseModel):
    AuditImages_1: Optional[AuditImages] = Field(None, alias='AuditImages')
    Confidence: Optional[Percent] = None
    ReferenceImage: Optional[AuditImage] = None
    SessionId: LivenessSessionId
    Status: LivenessSessionStatus


class GetTextDetectionResponse(BaseModel):
    JobStatus: Optional[VideoJobStatus] = None
    NextToken: Optional[PaginationToken] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    TextDetections: Optional[TextDetectionResults] = None
    TextModelVersion: Optional[String] = None
    VideoMetadata_1: Optional[VideoMetadata] = Field(None, alias='VideoMetadata')


class GroundTruthManifest(BaseModel):
    S3Object_1: Optional[S3Object] = Field(None, alias='S3Object')


class Image(BaseModel):
    Bytes: Optional[ImageBlob] = None
    S3Object_1: Optional[S3Object] = Field(None, alias='S3Object')


class IndexFacesRequest(BaseModel):
    CollectionId_1: CollectionId = Field(..., alias='CollectionId')
    DetectionAttributes: Optional[Attributes] = None
    ExternalImageId_1: Optional[ExternalImageId] = Field(None, alias='ExternalImageId')
    Image_1: Image = Field(..., alias='Image')
    MaxFaces: Optional[MaxFacesToIndex] = None
    QualityFilter_1: Optional[QualityFilter] = Field(None, alias='QualityFilter')


class LabelCategories(RootModel[List[LabelCategory]]):
    root: List[LabelCategory]


class ListDatasetLabelsResponse(BaseModel):
    DatasetLabelDescriptions_1: Optional[DatasetLabelDescriptions] = Field(
        None, alias='DatasetLabelDescriptions'
    )
    NextToken: Optional[ExtendedPaginationToken] = None


class ListStreamProcessorsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    StreamProcessors: Optional[StreamProcessorList] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class PersonDetail(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Face: Optional[FaceDetail] = None
    Index: Optional[PersonIndex] = None


class PersonDetection(BaseModel):
    Person: Optional[PersonDetail] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class PersonDetections(RootModel[List[PersonDetection]]):
    root: List[PersonDetection]


class PersonMatch(BaseModel):
    FaceMatches: Optional[FaceMatchList] = None
    Person: Optional[PersonDetail] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class PersonMatches(RootModel[List[PersonMatch]]):
    root: List[PersonMatch]


class ProjectPolicies(RootModel[List[ProjectPolicy]]):
    root: List[ProjectPolicy]


class ProtectiveEquipmentPerson(BaseModel):
    BodyParts_1: Optional[BodyParts] = Field(None, alias='BodyParts')
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Confidence: Optional[Percent] = None
    Id: Optional[UInteger] = None


class ProtectiveEquipmentPersons(RootModel[List[ProtectiveEquipmentPerson]]):
    root: List[ProtectiveEquipmentPerson]


class RecognizeCelebritiesRequest(BaseModel):
    Image_1: Image = Field(..., alias='Image')


class SearchFacesByImageRequest(BaseModel):
    CollectionId_1: CollectionId = Field(..., alias='CollectionId')
    FaceMatchThreshold: Optional[Percent] = None
    Image_1: Image = Field(..., alias='Image')
    MaxFaces_1: Optional[MaxFaces] = Field(None, alias='MaxFaces')
    QualityFilter_1: Optional[QualityFilter] = Field(None, alias='QualityFilter')


class SegmentDetection(BaseModel):
    DurationFrames: Optional[ULong] = None
    DurationMillis: Optional[ULong] = None
    DurationSMPTE: Optional[Timecode] = None
    EndFrameNumber: Optional[ULong] = None
    EndTimecodeSMPTE: Optional[Timecode] = None
    EndTimestampMillis: Optional[Timestamp] = None
    ShotSegment_1: Optional[ShotSegment] = Field(None, alias='ShotSegment')
    StartFrameNumber: Optional[ULong] = None
    StartTimecodeSMPTE: Optional[Timecode] = None
    StartTimestampMillis: Optional[Timestamp] = None
    TechnicalCueSegment_1: Optional[TechnicalCueSegment] = Field(
        None, alias='TechnicalCueSegment'
    )
    Type: Optional[SegmentType] = None


class SegmentDetections(RootModel[List[SegmentDetection]]):
    root: List[SegmentDetection]


class StartCelebrityRecognitionRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    Video_1: Video = Field(..., alias='Video')


class StartContentModerationRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    MinConfidence: Optional[Percent] = None
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    Video_1: Video = Field(..., alias='Video')


class StartFaceDetectionRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    FaceAttributes_1: Optional[FaceAttributes] = Field(None, alias='FaceAttributes')
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    Video_1: Video = Field(..., alias='Video')


class StartFaceSearchRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    CollectionId_1: CollectionId = Field(..., alias='CollectionId')
    FaceMatchThreshold: Optional[Percent] = None
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    Video_1: Video = Field(..., alias='Video')


class StartLabelDetectionRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Features: Optional[LabelDetectionFeatureList] = None
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    MinConfidence: Optional[Percent] = None
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    Settings: Optional[LabelDetectionSettings] = None
    Video_1: Video = Field(..., alias='Video')


class StartPersonTrackingRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    Video_1: Video = Field(..., alias='Video')


class StartSegmentDetectionFilters(BaseModel):
    ShotFilter: Optional[StartShotDetectionFilter] = None
    TechnicalCueFilter: Optional[StartTechnicalCueDetectionFilter] = None


class StartSegmentDetectionRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Filters: Optional[StartSegmentDetectionFilters] = None
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    SegmentTypes_1: SegmentTypes = Field(..., alias='SegmentTypes')
    Video_1: Video = Field(..., alias='Video')


class StartStreamProcessorRequest(BaseModel):
    Name: StreamProcessorName
    StartSelector: Optional[StreamProcessingStartSelector] = None
    StopSelector: Optional[StreamProcessingStopSelector] = None


class StartTextDetectionRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Filters: Optional[StartTextDetectionFilters] = None
    JobTag_1: Optional[JobTag] = Field(None, alias='JobTag')
    NotificationChannel_1: Optional[NotificationChannel] = Field(
        None, alias='NotificationChannel'
    )
    Video_1: Video = Field(..., alias='Video')


class UnindexedFace(BaseModel):
    FaceDetail_1: Optional[FaceDetail] = Field(None, alias='FaceDetail')
    Reasons_1: Optional[Reasons] = Field(None, alias='Reasons')


class UnindexedFaces(RootModel[List[UnindexedFace]]):
    root: List[UnindexedFace]


class Asset(BaseModel):
    GroundTruthManifest_1: Optional[GroundTruthManifest] = Field(
        None, alias='GroundTruthManifest'
    )


class Assets(RootModel[List[Asset]]):
    root: List[Asset]


class Celebrity(BaseModel):
    Face: Optional[ComparedFace] = None
    Id: Optional[RekognitionUniqueId] = None
    KnownGender_1: Optional[KnownGender] = Field(None, alias='KnownGender')
    MatchConfidence: Optional[Percent] = None
    Name: Optional[String] = None
    Urls_1: Optional[Urls] = Field(None, alias='Urls')


class CelebrityDetail(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Confidence: Optional[Percent] = None
    Face: Optional[FaceDetail] = None
    Id: Optional[RekognitionUniqueId] = None
    KnownGender_1: Optional[KnownGender] = Field(None, alias='KnownGender')
    Name: Optional[String] = None
    Urls_1: Optional[Urls] = Field(None, alias='Urls')


class CelebrityList(RootModel[List[Celebrity]]):
    root: List[Celebrity]


class CelebrityRecognition(BaseModel):
    Celebrity: Optional[CelebrityDetail] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class CelebrityRecognitions(RootModel[List[CelebrityRecognition]]):
    root: List[CelebrityRecognition]


class CompareFacesMatch(BaseModel):
    Face: Optional[ComparedFace] = None
    Similarity: Optional[Percent] = None


class CompareFacesMatchList(RootModel[List[CompareFacesMatch]]):
    root: List[CompareFacesMatch]


class CompareFacesRequest(BaseModel):
    QualityFilter_1: Optional[QualityFilter] = Field(None, alias='QualityFilter')
    SimilarityThreshold: Optional[Percent] = None
    SourceImage: Image
    TargetImage: Image


class CompareFacesUnmatchList(RootModel[List[ComparedFace]]):
    root: List[ComparedFace]


class CreateFaceLivenessSessionRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    Settings: Optional[CreateFaceLivenessSessionRequestSettings] = None


class DatasetSource(BaseModel):
    DatasetArn_1: Optional[DatasetArn] = Field(None, alias='DatasetArn')
    GroundTruthManifest_1: Optional[GroundTruthManifest] = Field(
        None, alias='GroundTruthManifest'
    )


class DetectCustomLabelsRequest(BaseModel):
    Image_1: Image = Field(..., alias='Image')
    MaxResults: Optional[UInteger] = None
    MinConfidence: Optional[Percent] = None
    ProjectVersionArn_1: ProjectVersionArn = Field(..., alias='ProjectVersionArn')


class DetectFacesRequest(BaseModel):
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    Image_1: Image = Field(..., alias='Image')


class DetectFacesResponse(BaseModel):
    FaceDetails: Optional[FaceDetailList] = None
    OrientationCorrection_1: Optional[OrientationCorrection] = Field(
        None, alias='OrientationCorrection'
    )


class DetectLabelsRequest(BaseModel):
    Features: Optional[DetectLabelsFeatureList] = None
    Image_1: Image = Field(..., alias='Image')
    MaxLabels: Optional[UInteger] = None
    MinConfidence: Optional[Percent] = None
    Settings: Optional[DetectLabelsSettings] = None


class DetectModerationLabelsRequest(BaseModel):
    HumanLoopConfig_1: Optional[HumanLoopConfig] = Field(None, alias='HumanLoopConfig')
    Image_1: Image = Field(..., alias='Image')
    MinConfidence: Optional[Percent] = None


class DetectProtectiveEquipmentRequest(BaseModel):
    Image_1: Image = Field(..., alias='Image')
    SummarizationAttributes: Optional[ProtectiveEquipmentSummarizationAttributes] = None


class DetectProtectiveEquipmentResponse(BaseModel):
    Persons: Optional[ProtectiveEquipmentPersons] = None
    ProtectiveEquipmentModelVersion: Optional[String] = None
    Summary: Optional[ProtectiveEquipmentSummary] = None


class DetectTextRequest(BaseModel):
    Filters: Optional[DetectTextFilters] = None
    Image_1: Image = Field(..., alias='Image')


class GetCelebrityRecognitionResponse(BaseModel):
    Celebrities: Optional[CelebrityRecognitions] = None
    JobStatus: Optional[VideoJobStatus] = None
    NextToken: Optional[PaginationToken] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    VideoMetadata_1: Optional[VideoMetadata] = Field(None, alias='VideoMetadata')


class GetFaceSearchResponse(BaseModel):
    JobStatus: Optional[VideoJobStatus] = None
    NextToken: Optional[PaginationToken] = None
    Persons: Optional[PersonMatches] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    VideoMetadata_1: Optional[VideoMetadata] = Field(None, alias='VideoMetadata')


class GetPersonTrackingResponse(BaseModel):
    JobStatus: Optional[VideoJobStatus] = None
    NextToken: Optional[PaginationToken] = None
    Persons: Optional[PersonDetections] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    VideoMetadata_1: Optional[VideoMetadata] = Field(None, alias='VideoMetadata')


class GetSegmentDetectionResponse(BaseModel):
    AudioMetadata: Optional[AudioMetadataList] = None
    JobStatus: Optional[VideoJobStatus] = None
    NextToken: Optional[PaginationToken] = None
    Segments: Optional[SegmentDetections] = None
    SelectedSegmentTypes: Optional[SegmentTypesInfo] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    VideoMetadata: Optional[VideoMetadataList] = None


class IndexFacesResponse(BaseModel):
    FaceModelVersion: Optional[String] = None
    FaceRecords: Optional[FaceRecordList] = None
    OrientationCorrection_1: Optional[OrientationCorrection] = Field(
        None, alias='OrientationCorrection'
    )
    UnindexedFaces_1: Optional[UnindexedFaces] = Field(None, alias='UnindexedFaces')


class Label(BaseModel):
    Aliases: Optional[LabelAliases] = None
    Categories: Optional[LabelCategories] = None
    Confidence: Optional[Percent] = None
    Instances_1: Optional[Instances] = Field(None, alias='Instances')
    Name: Optional[String] = None
    Parents_1: Optional[Parents] = Field(None, alias='Parents')


class LabelDetection(BaseModel):
    DurationMillis: Optional[ULong] = None
    EndTimestampMillis: Optional[ULong] = None
    Label_1: Optional[Label] = Field(None, alias='Label')
    StartTimestampMillis: Optional[ULong] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')


class LabelDetections(RootModel[List[LabelDetection]]):
    root: List[LabelDetection]


class Labels(RootModel[List[Label]]):
    root: List[Label]


class ListProjectPoliciesResponse(BaseModel):
    NextToken: Optional[ExtendedPaginationToken] = None
    ProjectPolicies_1: Optional[ProjectPolicies] = Field(None, alias='ProjectPolicies')


class RecognizeCelebritiesResponse(BaseModel):
    CelebrityFaces: Optional[CelebrityList] = None
    OrientationCorrection_1: Optional[OrientationCorrection] = Field(
        None, alias='OrientationCorrection'
    )
    UnrecognizedFaces: Optional[ComparedFaceList] = None


class TestingData(BaseModel):
    Assets_1: Optional[Assets] = Field(None, alias='Assets')
    AutoCreate: Optional[Boolean] = None


class TrainingData(BaseModel):
    Assets_1: Optional[Assets] = Field(None, alias='Assets')


class ValidationData(BaseModel):
    Assets_1: Optional[Assets] = Field(None, alias='Assets')


class CompareFacesResponse(BaseModel):
    FaceMatches: Optional[CompareFacesMatchList] = None
    SourceImageFace: Optional[ComparedSourceImageFace] = None
    SourceImageOrientationCorrection: Optional[OrientationCorrection] = None
    TargetImageOrientationCorrection: Optional[OrientationCorrection] = None
    UnmatchedFaces: Optional[CompareFacesUnmatchList] = None


class CreateDatasetRequest(BaseModel):
    DatasetSource_1: Optional[DatasetSource] = Field(None, alias='DatasetSource')
    DatasetType_1: DatasetType = Field(..., alias='DatasetType')
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')


class CreateProjectVersionRequest(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    OutputConfig_1: OutputConfig = Field(..., alias='OutputConfig')
    ProjectArn_1: ProjectArn = Field(..., alias='ProjectArn')
    Tags: Optional[TagMap] = None
    TestingData_1: Optional[TestingData] = Field(None, alias='TestingData')
    TrainingData_1: Optional[TrainingData] = Field(None, alias='TrainingData')
    VersionName_1: VersionName = Field(..., alias='VersionName')


class DetectLabelsResponse(BaseModel):
    ImageProperties: Optional[DetectLabelsImageProperties] = None
    LabelModelVersion: Optional[String] = None
    Labels_1: Optional[Labels] = Field(None, alias='Labels')
    OrientationCorrection_1: Optional[OrientationCorrection] = Field(
        None, alias='OrientationCorrection'
    )


class GetLabelDetectionResponse(BaseModel):
    JobStatus: Optional[VideoJobStatus] = None
    LabelModelVersion: Optional[String] = None
    Labels: Optional[LabelDetections] = None
    NextToken: Optional[PaginationToken] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    VideoMetadata_1: Optional[VideoMetadata] = Field(None, alias='VideoMetadata')


class TestingDataResult(BaseModel):
    Input: Optional[TestingData] = None
    Output: Optional[TestingData] = None
    Validation: Optional[ValidationData] = None


class TrainingDataResult(BaseModel):
    Input: Optional[TrainingData] = None
    Output: Optional[TrainingData] = None
    Validation: Optional[ValidationData] = None


class ProjectVersionDescription(BaseModel):
    BillableTrainingTimeInSeconds: Optional[ULong] = None
    CreationTimestamp: Optional[DateTime] = None
    EvaluationResult_1: Optional[EvaluationResult] = Field(
        None, alias='EvaluationResult'
    )
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    ManifestSummary: Optional[GroundTruthManifest] = None
    MaxInferenceUnits: Optional[InferenceUnits] = None
    MinInferenceUnits: Optional[InferenceUnits] = None
    OutputConfig_1: Optional[OutputConfig] = Field(None, alias='OutputConfig')
    ProjectVersionArn_1: Optional[ProjectVersionArn] = Field(
        None, alias='ProjectVersionArn'
    )
    SourceProjectVersionArn: Optional[ProjectVersionArn] = None
    Status: Optional[ProjectVersionStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    TestingDataResult_1: Optional[TestingDataResult] = Field(
        None, alias='TestingDataResult'
    )
    TrainingDataResult_1: Optional[TrainingDataResult] = Field(
        None, alias='TrainingDataResult'
    )
    TrainingEndTimestamp: Optional[DateTime] = None


class ProjectVersionDescriptions(RootModel[List[ProjectVersionDescription]]):
    root: List[ProjectVersionDescription]


class DescribeProjectVersionsResponse(BaseModel):
    NextToken: Optional[ExtendedPaginationToken] = None
    ProjectVersionDescriptions_1: Optional[ProjectVersionDescriptions] = Field(
        None, alias='ProjectVersionDescriptions'
    )
